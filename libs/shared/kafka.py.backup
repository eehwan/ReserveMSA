import asyncio
from aiokafka import AIOKafkaConsumer
import logging

from shared.config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class KafkaTopics:
    # Seat allocation related topics
    SEAT_ALLOCATED = "seat.allocated"
    SEAT_ALLOCATION_FAILED = "seat.allocation_failed"
    SEAT_ALLOCATION_REVERSE = "seat.allocation_reverse"
    SEAT_RELEASED = "seat.released"
    SEAT_SOLD = "seat.sold"

    # Payment related topics
    PAYMENT_INIT = "payment.init"
    PAYMENT_SUCCESSFUL = "payment.successful"
    PAYMENT_FAILED = "payment.failed"
    PAYMENT_TIMEOUT = "payment.timeout"

    # Reservation attempt topic
    RESERVATION_ATTEMPTED = "reservation.attempted"

consumer: AIOKafkaConsumer = None
consumer_task: asyncio.Task = None

async def consume_messages(topics: list[str], group_id: str):
    global consumer
    # Consumer is already started by start_kafka_consumer
    try:
        async for msg in consumer:
            logger.info(f"Consumed: {msg.topic}, {msg.partition}, {msg.offset}, {msg.key}, {msg.value}, {msg.timestamp}")
            # Placeholder for message processing logic
            # This part will likely be implemented in each service
    finally:
        await consumer.stop()

async def start_kafka_consumer(topics: list[str], group_id: str, retries: int = 20, delay: int = 10):
    global consumer, consumer_task
    logger.info(f"Attempting to start Kafka consumer for topics: {topics} with group_id: {group_id}...")

    consumer = AIOKafkaConsumer(
        *topics,
        bootstrap_servers=settings.KAFKA_BOOTSTRAP_SERVERS,
        group_id=group_id,
        retry_backoff_ms=5000,
        max_poll_interval_ms=300000
    )

    for i in range(retries):
        try:
            await consumer.start()
            logger.info("Kafka consumer started successfully.")
            consumer_task = asyncio.create_task(consume_messages(topics, group_id))
            return
        except Exception as e:
            logger.warning(f"Attempt {i+1}/{retries}: Failed to connect to Kafka: {e}. Retrying in {delay} seconds...")
            await asyncio.sleep(delay)
    logger.error(f"Could not connect to Kafka after {retries} attempts. Exiting.")
    # If connection fails after all retries, ensure consumer is stopped and task is not created
    if consumer:
        await consumer.stop()
    consumer_task = None # Ensure task is not set if consumer failed to start

async def stop_kafka_consumer():
    global consumer_task
    if consumer_task:
        logger.info("Stopping Kafka consumer...")
        consumer_task.cancel()
        try:
            await consumer_task
        except asyncio.CancelledError:
            logger.info("Kafka consumer task cancelled.")
