version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: unless-stopped

  kafka1:
    image: bitnami/kafka:3.4.0
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka1:9092
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
    volumes:
      - kafka1_data:/bitnami/kafka  # Kafka 로그 영속성
    restart: unless-stopped
    
  kafka2:
    image: bitnami/kafka:3.4.0
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka2:9093
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
    volumes:
      - kafka2_data:/bitnami/kafka  # Kafka 로그 영속성
    restart: unless-stopped

  postgreSQL:
    image: postgres:13
    environment:
      POSTGRES_DB: user_db
    env_file:
      - .env
    volumes:
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data  # 프로덕션 데이터 영속성
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --notify-keyspace-events KEA
    volumes:
      - redis_data:/data  # 프로덕션 데이터 영속성
    restart: unless-stopped

  user-service:
    build:
      context: ./
      dockerfile: ./services/Dockerfile.prod
      args:
        SERVICE_NAME: user-service
    env_file:
      - .env
    depends_on:
      - postgreSQL
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        orders:
          memory: 256M

  event-service:
    build:
      context: ./
      dockerfile: ./services/Dockerfile.prod
      args:
        SERVICE_NAME: event-service
    env_file:
      - .env
    depends_on:
      - postgreSQL
      - kafka1
      - kafka2
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        orders:
          memory: 256M

  order-service:
    build:
      context: ./
      dockerfile: ./services/Dockerfile.prod
      args:
        SERVICE_NAME: order-service
    env_file:
      - .env
    depends_on:
      - redis
      - kafka1
      - kafka2
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        orders:
          memory: 256M

  nginx:
    build: ./infra/nginx
    ports:
      - "80:80"
    depends_on:
      - user-service
      - event-service
      - order-service
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  kafka1_data:
  kafka2_data: